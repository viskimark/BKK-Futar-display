@page "/OldStyle"
@inject NavigationManager NavigationManager

<head>
	<link rel="stylesheet" href="/css/oldStyle.css" />
</head>
<table id="mainTable" cellpadding="0" cellspacing="0">
	<tr id="topRow">
		@if (!showDropdown)
		{
			<td style="align-content:center; font-size:175%; padding-left:1%;" colspan="2" @onclick="() => showDropdown = true">
				@Data.apiHandler.getStopShortName(Data.index)
			</td>
		}
		else
		{
			<td style="align-content:center; font-size:175%; padding-left:1%;" colspan="2">
				<select @onchange="OnSelect">
					<option value="">...</option>
					@for (int i = 0; i < Data.apiHandler.stops.Length; i++)
					{
						<option value="@i">@Data.apiHandler.getStopLongName(i)</option>
					}
				</select>
				<button @onclick="NavigateToPage">Másik stílus</button>
                <InputText @bind-Value="Data.key" />
			</td>
		}
		<td style="text-align:right; font-size:150%; padding-right:1%;" colspan="2">
			@DateTime.Now.ToString("H:mm")
		</td>
	</tr>
	<tr id="infoRow">
		<td class="left-col" style="padding-top:0px; padding-bottom:0px">
			<p>Vonal</p>
			<p class="english">Line</p>
		</td>
		<td class="middle-col" style="padding-top:0px; padding-bottom:0px">
			<p>Célállomás</p>
			<p class="english">Destination</p>
		</td>
		<td class="middle-right-col" style="text-align:left; padding-top:0px; padding-bottom:0px; padding-right:0%;">
			<p>Indul (perc)</p>
			<p class="english">Departs (min)</p>
		</td>
		<td class="right-col" style="text-align:left; padding-top:0px; padding-bottom:0px">
			<p>Kijárat</p>
			<p class="english">Exit</p>
		</td>
	</tr>
	@{
		//BKK_API_manager.Departure[] departures = BKK_API_manager.apiHandler.getDeparturesWithFictive(BKK_API_manager.apiHandler.stops[index], "fiktiv.json");
		int limit = 9;
		bool smallerArray = limit > Data.departures.Length ? true : false;
		int shown = 0;
		for (int i = 0; i < limit; i++)
		{
			string colorClass = "color2";
			if (shown % 2 == 0)
			{
				colorClass = "color1";
			}
			if (smallerArray && i >= Data.departures.Length)
			{
				<tr class="@colorClass">
					<td class="left-col">

					</td>
					<td class="middle-col">

					</td>
					<td class="middle-right-col">

					</td>
					<td class="right-col">

					</td>
				</tr>
				shown++;
			}
			else
			{
				if (Data.departures[i].timeUntilDeparture.timeInSeconds > 0)
				{
					int opacity = 0;
					string textColor = "black";
					string expressClass = "regular";
					int textSize = 100;
					string routeName = Data.departures[i].route.routeName;

					//
					string width = "95";
					string x = "12.5";

					if(routeName.Last() == 'E')
					{
						opacity = 1;
						textColor = "#DF2040";
						textSize = 85;
						expressClass = "express";
						routeName = routeName.Substring(0, routeName.Length - 1);
						if(routeName.Length == 2)
						{
							width = "75";
							x = "21";
						}
						if (routeName.Length == 1)
						{
							width = "50";
							x = "34";
						}
					}
					else if(routeName[0] == '9' && routeName.Length >= 3)
					{
						if(routeName[1] == '0')
						{
							routeName = routeName.Substring(2, 1) + 'É';
						}
						else
						{
							routeName = routeName.Substring(1, 2) + 'É';
						}
						if (Data.departures[i].route.routeName.Last() == 'A' || Data.departures[i].route.routeName.Last() == 'B')
						{
							if (Data.departures[i].route.routeName[1] == '0')
							{
								routeName = "10" + routeName;
							}
							else
							{
								routeName = '1' + routeName;
							}
						}
					}

					string hexColor = Data.departures[i].route.color;

					string bgOpacity = colorClass == "color1" ? "0.35" : "0.25";

					string bgColor = $"rgba({Convert.ToInt32(hexColor.Substring(0, 2), 16)}, {Convert.ToInt32(hexColor.Substring(2, 2), 16)}, {Convert.ToInt32(hexColor.Substring(4, 2), 16)}, {bgOpacity})";

					int fontSize = 100;
					int charLimit = 35;
					//double multiplier = Data.departures[i].route.destination.Length > charLimit && Data.departures[i].route.destination.Length < charLimit + 30 ? 1.5 : 2;
					if (Data.departures[i].route.destination.Length > charLimit)
					{
						fontSize -= (int)Math.Round((Data.departures[i].route.destination.Length - charLimit) * ((Data.departures[i].route.destination.Length / charLimit) + 0.30));
					}

					<tr class="@colorClass @expressClass" style="background-color:@bgColor">
						<td class="left-col">
							
							<svg width="120" height="60" style="position:relative; top:8%">
								<rect style="fill:none;stroke:@textColor;stroke-width:5.5;stroke-linejoin:miter;stroke-opacity:@opacity"
									  id="rect340"
									  width="@width"
									  height="50"
									  x="@x"
									  y="5"
									  rx="0" />
								<text xml:space="preserve"
									  style="font-weight:bold;font-size:@textSize%;line-height:1;font-family:HelveticaNeue;font-weight:bold;dominant-baseline:middle;letter-spacing:-0px;text-anchor:middle;fill:@textColor;fill-opacity:1;stroke-width:2;stroke-linejoin:round"
									  x="59"
									  y="34"
									  id="text394">@routeName</text>
							</svg>
						</td>
						<td class="middle-col" style="font-size: @fontSize%;">
							@Data.departures[i].route.destination
						</td>
						<td class="middle-right-col">
							@Data.departures[i].timeUntilDeparture.ToString()
						</td>
						<td class="right-col">
							@if (Data.departures[i].exit != "-")
							{
								@Data.departures[i].exit
							}
						</td>
					</tr>
					shown++;
				}
				else
				{
					limit++;
				}
			}
		}
	}
</table>

@code {
	private void NavigateToPage()
	{
		NavigationManager.NavigateTo("/");
	}

	private bool showDropdown = false;

	private string departsColor1 = "darkgreen";
	private string departsColor2 = "lightgreen";

	private void OnSelect(ChangeEventArgs e)
	{
		// Handle the selected value
		Data.index = int.Parse(e.Value.ToString());
		showDropdown = false;
		Data.RefreshDepartures();
		InvokeAsync(StateHasChanged);
	}

	private System.Timers.Timer timer;
	private System.Timers.Timer colorTimer;

	protected override void OnInitialized()
	{
		timer = new System.Timers.Timer();
		timer.Interval = 15000; // 15s
		timer.AutoReset = true;
		timer.Elapsed += (sender, args) =>
		{
			Data.RefreshDepartures();
			RefreshData(sender, args);
		};
		timer.Start();

		colorTimer = new System.Timers.Timer();
		colorTimer.Interval = 500; // 0.5s
		colorTimer.AutoReset = true;
		colorTimer.Elapsed += (sender, args) =>
		{
			string temp = departsColor1;
			departsColor1 = departsColor2;
			departsColor2 = temp;

			RefreshData(sender, args);
		};
		colorTimer.Start();
	}

	private void RefreshData(object source, System.Timers.ElapsedEventArgs e)
	{
		// Code to refresh the data from the API.
		// ...
		InvokeAsync(StateHasChanged);
	}
}
